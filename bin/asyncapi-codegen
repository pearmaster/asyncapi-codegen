#!/usr/bin/env python3

from asyncapicodegen import cpp, specwrapper, python_client, markdown_summary
import stringcase
import json
import sys
import os
from pprint import pprint
from copy import copy
import argparse
import urllib.request
import ruamel.yaml as yaml

assert(sys.version_info.major == 3 and sys.version_info.minor >= 7), "Requires Python 3.7 or later"

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate AsyncAPI Code")
    input_group = parser.add_mutually_exclusive_group(required=True)
    input_group.add_argument("--yaml", type=open, help="AsyncAPI YAML document")
    input_group.add_argument("--json", type=open, help="AsyncAPI JSON document")
    input_group.add_argument("--yaml-url", type=str, help="URL to AsyncAPI YAML document")
    input_group.add_argument("--json-url", type=str, help="URL to AsyncAPI JSON document")
    parser.add_argument("--output", type=str, help="Directory where output files should be written", required=True)
    parser.add_argument("--name", type=str, help="Name of the class that is generated", required=True)
    parser.add_argument("--progtype", type=str, choices=["provider", "utilizer"], default="utilizer")
    lang = parser.add_mutually_exclusive_group(required=True)
    lang.add_argument("--cpp", action="store_true", help="Generated C++ code")
    lang.add_argument("--python", action="store_true", help="Generate Python3 code")
    lang.add_argument("--python-package", action="store_true", help="Generate Python3 package")
    lang.add_argument("--markdown", action="store_true", help="Generate Markdown Documentation")
    args = parser.parse_args()

    spec = None

    if args.yaml_url:
        with urllib.request.urlopen(args.yaml_url) as yaml_fp:
            spec = yaml.load(yaml_fp, Loader=yaml.Loader)
    elif args.json_url:
        with urllib.request.urlopen(args.json_url) as json_fp:
            spec = json.load(json_fp)
    elif args.yaml:
        spec = yaml.load(args.yaml, Loader=yaml.Loader)
    elif args.json:
        spec = json.load(args.json)

    if args.progtype == 'provider':
        spec = specwrapper.invert_spec(spec)

    if args.cpp:
        resolver = cpp.SimpleResolver(args.name)
        src_dir = os.path.join(args.output, "src")
        inc_dir = os.path.join(args.output, "include")
        try:
            os.mkdir(src_dir)
            os.mkdir(inc_dir)
        except FileExistsError:
            pass

        generator = cpp.GeneratorFromAsyncApi(src_dir, inc_dir, resolver)
        result = generator.Generate(spec, args.name)
        cppList = result.cpp
        hppList = result.hpp

        with open(os.path.join(args.output, 'sources.cmake'), 'w') as fp:
            fp.write(f"set({args.name}_sources\n")
            cppList.sort()
            for c in cppList:
                fp.write("{}\n".format(c))
            fp.write(")\n")
        
        with open(os.path.join(args.output, 'headers.cmake'), 'w') as fp:
            fp.write(f"set({args.name}_headers\n")
            hppList.sort()
            for c in hppList:
                fp.write("{}\n".format(c))
            fp.write(")\n")

    elif args.python or args.python_package:
        if args.python_package:
            the_dirs = ['messages', 'schemas']
            for d in the_dirs:
                try:
                    dir_name = os.path.join(args.output, d)
                    os.mkdir(dir_name)
                except FileExistsError:
                    pass
                with open(os.path.join(dir_name, '__init__.py'), 'w') as fp:
                    fp.write('')
            resolver = python_client.PackageResolver(args.name)
        else:
            resolver = python_client.SimpleResolver(args.name)
        pyClientGenerator = python_client.GeneratorFromAsyncApi(args.output, resolver)
        pyClientGenerator.Generate(spec, stringcase.pascalcase(args.name), args.name)
        if args.python_package:
            pyClientGenerator.GenerateSetup(spec, args.name)

    elif args.markdown:
        resolver = cpp.SimpleResolver(args.name)
        outname = os.path.join(args.output, f"{args.name}.md")
        docGenerator = markdown_summary.GeneratorFromAsyncApi(outname, resolver)
        docGenerator.Generate(spec)

