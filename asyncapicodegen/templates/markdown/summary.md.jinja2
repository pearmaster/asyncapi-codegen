{%-macro ParamList(ch)-%}
{%-for paramName, paramObj in ch.Parameters()-%}
 * **{{paramName}}** {{paramObj.Resolve().description | replace("\n", " ")}} {%if paramObj.GetEnglishType(resolver) %} - Its value must be {{paramObj.GetEnglishType(resolver)}}{%endif%}
{%endfor-%}
{%-endmacro-%}
{%-set client = spec['x-client-role'] or 'client'%}
# MQTT _Summary_ of {{ spec.info.title }} {{client |PascalCase}}
*Version {{ spec.info.version }}*

{{spec.info.description}}

{%include 'operation_list.md.jinja2'%}

{%-if spec.tags | length > 0 %}
## Tags
{%for tag in spec.tags%}
<a name="tag-{{tag.name}}"></a>
##### {{tag.name}}
{{tag.description}}
{%-for ch in spec.channels.values() if 'publish' in ch%}
{%-if ch.publish.HasTag(tag.name)%}
 * [{{ch.publish.summary or ch.publish.operationId}}](#{{ch.publish.operationId}}) {{ch.publish.GetTagNote(tag.name)}}
{%-endif%}
{%-endfor%}
{%-for ch in spec.channels.values() if 'subscribe' in ch%}
{%-if ch.subscribe.HasTag(tag.name)%}
 * [{{ch.subscribe.summary or ch.subscribe.operationId}}](#{{ch.subscribe.operationId}}) {{ch.subscribe.GetTagNote(tag.name)}}
{%-endif%}
{%-endfor%}
<details>
<summary>
{{tagItems | length}} operation{%if tagItems | length != 1 %}s{%endif%}
</summary>
{{tagList}}
</details>

{%endfor%}
{%-endif%} {# end if spec.tags #}

## Publish operations by {{client |PascalCase}}
{%for ch in spec.channels.values() if 'publish' in ch%}
{%-set op = ch.publish %}<a name="{{op.operationId}}"></a>
### {{op.summary or op.operationId}}
###### ID: `{{op.operationId}}` {%if op.GetQoS()%}QoS: {{op.GetQoS()}}{%endif%} {%if op.GetRetain()%}Retained{%endif%}
{{op.description}}
{%if 'x-see-also' in op and 'operationIds' in op['x-see-also'] %}
**See also**: {%for altOpId in op['x-see-also']['operationIds'] %}[{{altOpId}}](#{{altOpId}}){%if not loop.last%}, {%endif%}{%endfor%}
{%endif-%}
##### {{client |PascalCase}} publishes to topic: `{{ch.channelPath}}`
{{ParamList(ch)}}

{%include 'payload.md.jinja2'%}
{%include 'examples.md.jinja2'%}
{%include 'tags.md.jinja2'%}
{%-if 'x-test-description' in op %}
##### Notes for test team
{{op['x-test-description']}}
{%endif%}
----
{% endfor %} {#publish operations#}

## Subscribe operations by {{client |PascalCase}}
{%for ch in spec.channels.values() if 'subscribe' in ch%}
{%-set op = ch.subscribe %}<a name="{{op.operationId}}"></a>
### {{op.summary or op.operationId}}
###### Operation ID: `{{op.operationId}}` {%if op.GetQoS()%}QoS: {{op.GetQoS()}}{%endif%} {%if op.GetRetain()%}Retained{%endif%}
{{op.description}}
{%if 'x-see-also' in op and 'operationIds' in op['x-see-also'] %}
**See also**: {%for altOpId in op['x-see-also']['operationIds'] %}[{{altOpId}}](#{{altOpId}}){%if not loop.last%}, {%endif%}{%endfor%}
{%endif-%}
##### {{client |PascalCase}} subscribes to topic: `{{ch.channelPath}}`
{{ParamList(ch)}}
{%-if ch.GetPathParameters() | length > 0 %}
The actual topic used for the MQTT subscription is `{{ch.GetSubscribePath()}}`
{%-endif%} {#has params#}

{%include 'payload.md.jinja2'%}
{%include 'examples.md.jinja2'%}
{%include 'tags.md.jinja2'%}
{%-if 'x-test-description' in op %}
##### Notes for test team
{{op['x-test-description']}}
{%endif%}
----
{% endfor %} {#subscribe operations#}
