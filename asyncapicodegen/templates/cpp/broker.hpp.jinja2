{%-import 'type_helpers.jinja2' as helpers%}
{%-include 'file_prologue.jinja2'%}
#pragma once

#include <mosquitto.h>
#include <queue>
#include <boost/interprocess/sync/scoped_lock.hpp>
#include <boost/thread/mutex.hpp>
#include <functional>

{%include 'ibrokerconnection.hpp.jinja2'%}

{%for n in ns%}
namespace {{n}} {
{%endfor%}

/*! This class presents a connection to a MQTT broker.
 * It will connect to {{server.url}}
 */
class {{Name}}BrokerConnection : public IBrokerConnection
{
public:
    {%-if 'variables' in server%}
    {%-for varName, varDef in server.variables.items()%}
    {%-if 'enum' in varDef%}
    enum class {{helpers.ServerUriVarType(varName, varDef)}}
    {
        {%-if 'default' in varDef%}
        _DEFAULT,
        {%-endif%}
        {%-for v in varDef.enum%}
        {{v | enumify}}{%if not loop.last%},{%endif%}
        {%-endfor%}
    };
    {%-endif%} {#enum#}
    {%-endfor%}
    {%-endif%} {#server variables#}

    /*! Constructor for a {{Name}}BrokerConnection.
    {%-if server.TryGetBinding('clientId') is none%}
     * \param clientId is the client ID used to connect to the broker.
    {%-else%}
     * The client will connect to the broker with the client ID of "{{server.TryGetBinding('clientId')}}".
    {%-endif%}
    {%-for p in server.GetUrl()['parameters'] %}
     * \param {{p}} a value to used for the MQTT broker URI.
    {%-endfor%}
    {%-if server.AcceptsUsernamePassword()%}
     * \param username is the username to use for authenticating against the broker.
     * \param password is the password to use for authenticating against the broker. 
    {%-endif%}
     */
    {{Name}}BrokerConnection(
    {%-if server.TryGetBinding('clientId') is none%}const std::string& clientId{%endif%}
    {%-for p in server.GetUrl()['parameters'] %}
        {%-if server.TryGetBinding('clientId') is none or not loop.first%}, {%endif-%}
        {{helpers.ServerUriVarType(p, server.variables[p])}} {{p}}
    {%-endfor%}
    {%-if server.AcceptsUsernamePassword()%}
        {{-','}} const std::string& username, const std::string& password
    {%-endif%});
    virtual ~{{Name}}BrokerConnection();

    /*! Publish a message to the MQTT broker.
     * \param topic the topic of the message.
     * \param payload is the payload body of the message.
     * \param qos the MQTT quality of service value between 0 and 2 inclusive.
     * \param retain an indicator that the MQTT broker should retain the message.
     */
    virtual void Publish(const std::string& topic, const std::string& payload, unsigned qos, bool retain) override;

    /*! Subscribe to a topic.
     * \param topic the subscription topic.
     * \param qos an MQTT quality of service value between 0 and 2 inclusive.
     */
    virtual void Subscribe(const std::string& topic, int qos) override;

    /*! Add a function that is called on the receipt of a message.
     * Many callbacks can be added, and each will be called in the order in which the callbacks were added.
     * \param cb the callback function.
     */
    virtual void AddMessageCallback(const std::function<void(const std::string&, const std::string&)>& cb) override;

    /*! Determines if a topic string matches a subscription topic.
     * \param topic a topic to match against a subscription.
     * \param subscr the subscription topic string to match against.
     * \return true if it is a match.
     */
    virtual bool TopicMatchesSubscription(const std::string& topic, const std::string& subscr) const override;

    enum class MessageType
    {
        CONNECTION,
        SUBSCRIPTION,
        PUBLISH,
        RECEIPT,
        INTERNAL
    };

    enum class MessageSeverity
    {
        INFO,
        ERROR
    };

    /*! Registers a method to be called for logging messages.
     * \param cb The function to be called.
     */
    virtual void RegisterLogCallback(const std::function<void(MessageType, MessageSeverity, const std::string&)& cb>);

protected:
    /*! Establishes the connection to the broker.
     */
    virtual void Connect();

    /*! Logs a message.
     * 
     * Sends a log message to the logger, if one is registered.
     *
     * \param type The type of message that is being logged.
     * \param lvl The severity of the message to be logged.
     * \param msg The log message string.
     */
    virtual void Log(MessageType type, MessageSeverity lvl, const std::string& msg) const;
private:
    class MqttMessage
    {
    public:
        MqttMessage(const std::string& topic, const std::string& payload, int qos, bool retain) : _topic(topic), _payload(payload), _qos(qos), _retain(retain) {}
        virtual ~MqttMessage() = default;
        std::string _topic;
        std::string _payload;
        int _qos;
        bool _retain;
    };

    struct MqttSubscription
    {
        MqttSubscription(const std::string& topic, int qos) : _topic(topic), _qos(qos) {}
        ~MqttSubscription() = default;
        std::string _topic;
        int _qos;
    };

    mosquitto *_mosq;
    std::string _host;
    int _port;
    {%-if server.AcceptsUsernamePassword()%}
    std::string _username;
    std::string _password;
    {%-endif%}
    std::string _clientId;
    std::queue<MqttSubscription> _subscriptions;
    boost::mutex _mutex;
    std::vector<std::function<void(const std::string&, const std::string&)>> _messageCallbacks;
    std::queue<MqttMessage> _msgQueue;
    std::function<void(MessageType, MessageSeverity, const std::string&) _logger;
};

{%for n in ns|reverse%}
} // end namespace {{n}}
{%endfor%}